openapi: 3.0.3
info:
  title: Movie Explorer API
  version: 1.0.0
  description: "API documentation for the Movie Explorer application."
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token required for authenticated endpoints (supervisor/admin roles for create/update/delete movies, user for subscriptions and wishlist). Use the /login endpoint to obtain a token. In Swagger UI, enter the token in the 'Authorize' button as 'Bearer <token>' (with the 'Bearer' prefix and a space). Some Swagger UI versions may require entering only the token without the 'Bearer' prefix—try both formats if you encounter issues."
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "Akshay"
        last_name:
          type: string
          example: "Katoch"
        email:
          type: string
          example: "akshaykatoch38@gmail.com"
        mobile_number:
          type: string
          example: "9876543210"
        role:
          type: string
          enum: [user, supervisor]
          example: "user"
        active_plan:
          type: string
          enum: [basic, gold, platinum]
          example: "basic"
          description: "The user's active subscription plan (e.g., basic, gold, platinum). Will always be present for users (default: basic)."
        device_token:
          type: string
          example: "fcm-device-token-here"
          nullable: true
          description: "FCM device token for push notifications, if set."
        notifications_enabled:
          type: boolean
          example: true
          description: "Whether the user has enabled notifications (defaults to true)."
        stripe_customer_id:
          type: string
          example: null
          nullable: true
          description: "Stripe customer ID, if linked."
        created_at:
          type: string
          format: date-time
          example: "2025-05-26T17:28:38.693Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-05-26T17:28:38.693Z"
      required:
        - id
        - first_name
        - last_name
        - email
        - mobile_number
        - role
        - active_plan
        - notifications_enabled
        - created_at
        - updated_at
    Movie:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "John Wick"
        genre:
          type: string
          example: "Action"
        release_year:
          type: integer
          example: 2014
        rating:
          type: number
          format: float
          example: 8.8
        director:
          type: string
          example: "Chad Stahelski"
          nullable: true
        duration:
          type: integer
          example: 120
          nullable: true
        description:
          type: string
          example: "John Wick's style of shooting baddi"
          nullable: true
        plan:
          type: string
          enum: [basic, gold, platinum]
          example: "basic"
        poster_url:
          type: string
          example: "https://res.cloudinary.com/example/image/upload/v1234567890/poster.jpg"
          nullable: true
        banner_url:
          type: string
          example: "https://res.cloudinary.com/example/image/upload/v1234567890/banner.jpg"
          nullable: true
        is_wishlisted:
          type: boolean
          example: true
          nullable: true
          description: "Indicates if the movie is in the user's wishlist (true if wishlisted, false if not, present only in wishlist-related endpoints)."
      required:
        - id
        - title
        - genre
        - release_year
        - rating
        - plan
    Subscription:
      type: object
      properties:
        id:
          type: integer
          example: 31
        user_id:
          type: integer
          example: 10
        plan:
          type: string
          enum: [basic, gold, platinum]
          example: "basic"
        status:
          type: string
          enum: [pending, active, inactive, cancelled]
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2025-05-08T07:30:18.299Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-05-27T04:19:24.638Z"
        expiry_date:
          type: string
          format: date-time
          example: null
          nullable: true
          description: "Expiry date of the subscription; null for basic plan."
        session_id:
          type: string
          example: null
          nullable: true
          description: "Stripe session or payment intent ID, if applicable."
        session_expires_at:
          type: string
          format: date-time
          example: null
          nullable: true
          description: "Expiration time of the Stripe session, if applicable."
      required:
        - id
        - user_id
        - plan
        - status
        - created_at
        - updated_at
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example: ["Error message"]
      required:
        - errors
paths:
  /signup:
    post:
      summary: Signup user
      tags:
        - Users
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: Akshay
                last_name:
                  type: string
                  example: Katoch
                email:
                  type: string
                  example: akshaykatoch38@gmail.com
                password:
                  type: string
                  example: Password123
                mobile_number:
                  type: string
                  example: "9876543210"
              required:
                - first_name
                - last_name
                - email
                - password
                - mobile_number
      responses:
        '201':
          description: "User created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Signup successful"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiJ9..."
                  user:
                    $ref: '#/components/schemas/User'
              example:
                message: "Signup successful"
                token: "eyJhbGciOiJIUzI1NiJ9..."
                user:
                  id: 3
                  first_name: "Akshay"
                  last_name: "Katoch"
                  email: "akshaykatoch38@gmail.com"
                  mobile_number: "9876543210"
                  role: "user"
                  active_plan: "basic"
                  device_token: null
                  notifications_enabled: true
                  stripe_customer_id: null
                  created_at: "2025-05-26T17:28:38.693Z"
                  updated_at: "2025-05-26T17:28:38.693Z"
        '422':
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Email has already been taken"]
  /login:
    post:
      summary: Login user
      description: "Logs in a user and returns a JWT token for authentication. Use this token in the 'Authorize' button (top-right) as 'Bearer <token>' to authenticate subsequent requests. Ensure there is a space between 'Bearer' and the token. Some Swagger UI versions may require entering only the token without the 'Bearer' prefix—try both formats if you encounter issues."
      tags:
        - Users
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: akshaykatoch38@gmail.com
                password:
                  type: string
                  example: Password123
              required:
                - email
                - password
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiJ9..."
                    description: "JWT token to be used for authenticated requests"
                  user:
                    $ref: '#/components/schemas/User'
              example:
                token: "eyJhbGciOiJIUzI1NiJ9..."
                user:
                  id: 3
                  first_name: "Akshay"
                  last_name: "Katoch"
                  email: "akshaykatoch38@gmail.com"
                  mobile_number: "9876543210"
                  role: "user"
                  active_plan: "basic"
                  device_token: null
                  notifications_enabled: true
                  stripe_customer_id: null
                  created_at: "2025-05-26T17:28:38.693Z"
                  updated_at: "2025-05-26T17:28:38.693Z"
        '401':
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Invalid email or password"]
  /logout:
    post:
      summary: Logout user
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Logout successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
              example:
                message: "Logout successful"
        '401':
          description: "Unauthorized (missing or invalid token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Authorization header missing"]
        '422':
          description: "Invalid token"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Invalid token"]
  /update_preferences:
    post:
      summary: Update user preferences
      description: "Updates the user's notification preferences and/or device token for push notifications. Use this to enable/disable notifications or register a new device token. Requires a valid JWT token. First, use /login to obtain a token, then enter it in the 'Authorize' button (top-right) as 'Bearer <token>'."
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                device_token:
                  type: string
                  example: "fcm-device-token-here"
                  nullable: true
                  description: "FCM device token for push notifications (optional)"
                notifications_enabled:
                  type: boolean
                  example: true
                  nullable: true
                  description: "Whether the user wants to receive notifications (optional, defaults to true if not provided)"
      responses:
        '200':
          description: "Preferences updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Preferences updated successfully"
                  device_token:
                    type: string
                    example: "fcm-device-token-here"
                    nullable: true
                    description: "FCM device token for push notifications, if set."
                  notifications_enabled:
                    type: boolean
                    example: true
                    nullable: true
                    description: "Whether the user has enabled notifications."
                required:
                  - message
              example:
                message: "Preferences updated successfully"
                device_token: null
                notifications_enabled: true
        '401':
          description: "Unauthorized (invalid or missing JWT token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Authentication required"]
        '422':
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Device token is already in use by another user"]
  /update_profile_picture:
    post:
      summary: Update user profile picture
      description: "Updates the user's profile picture. Requires a valid JWT token. First, use /login to obtain a token, then enter it in the 'Authorize' button (top-right) as 'Bearer <token>'."
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                profile_picture:
                  type: string
                  format: binary
                  description: "Profile picture image file"
              required:
                - profile_picture
      responses:
        '200':
          description: "Profile picture updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile picture updated successfully"
                  profile_picture_url:
                    type: string
                    example: "https://res.cloudinary.com/example/image/upload/v1234567890/profile.jpg"
              example:
                message: "Profile picture updated successfully"
                profile_picture_url: "https://res.cloudinary.com/example/image/upload/v1234567890/profile.jpg"
        '401':
          description: "Unauthorized (invalid or missing JWT token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Authentication required"]
  /movies:
    get:
      summary: List movies
      description: "Retrieves a paginated list of all movies, regardless of the user's subscription plan. Use query parameters to search by title or filter by genre, release year, or rating. No authentication is required, but a JWT token can be provided to identify the user."
      tags:
        - Movies
      parameters:
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: "Search by title"
        - name: genre
          in: query
          required: false
          schema:
            type: string
          description: "Filter by genre"
        - name: release_year
          in: query
          required: false
          schema:
            type: integer
          description: "Filter by release year"
        - name: rating
          in: query
          required: false
          schema:
            type: number
            format: float
          description: "Filter by rating"
        - name: page
          in: query
          required: false
          schema:
            type: integer
          description: "Page number for pagination"
      responses:
        '200':
          description: "Movies retrieved successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
                  total_pages:
                    type: integer
                    example: 1
                  current_page:
                    type: integer
                    example: 1
              example:
                movies:
                  - id: 1
                    title: "John Wick"
                    genre: "Action"
                    release_year: 2014
                    rating: 8.8
                    director: "Chad Stahelski"
                    duration: 120
                    description: "John Wick's style of shooting baddi"
                    plan: "basic"
                    poster_url: "https://res.cloudinary.com/example/image/upload/v1234567890/poster.jpg"
                    banner_url: "https://res.cloudinary.com/example/image/upload/v1234567890/banner.jpg"
                total_pages: 1
                current_page: 1
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Internal server error"]
    post:
      summary: Create a movie
      description: "Creates a new movie. Requires supervisor role. Authenticate using the JWT token obtained from /login. Enter the token in the 'Authorize' button (top-right) as 'Bearer <token>'."
      tags:
        - Movies
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "John Wick"
                genre:
                  type: string
                  example: "Action"
                release_year:
                  type: integer
                  example: 2014
                rating:
                  type: number
                  format: float
                  example: 8.8
                director:
                  type: string
                  example: "Chad Stahelski"
                duration:
                  type: integer
                  example: 120
                description:
                  type: string
                  example: "John Wick's style of shooting baddi"
                plan:
                  type: string
                  enum: [basic, gold, platinum]
                  example: "basic"
                poster:
                  type: string
                  format: binary
                  description: "Poster image file"
                banner:
                  type: string
                  format: binary
                  description: "Banner image file"
              required:
                - title
                - genre
                - release_year
                - rating
                - plan
      responses:
        '201':
          description: "Movie created successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
              example:
                id: 1
                title: "John Wick"
                genre: "Action"
                release_year: 2014
                rating: 8.8
                director: "Chad Stahelski"
                duration: 120
                description: "John Wick's style of shooting baddi"
                plan: "basic"
                poster_url: "https://res.cloudinary.com/example/image/upload/v1234567890/poster.jpg"
                banner_url: "https://res.cloudinary.com/example/image/upload/v1234567890/banner.jpg"
        '403':
          description: "Forbidden (requires supervisor role)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Forbidden: You do not have permission to perform this action"]
        '422':
          description: "Validation errors"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Title can't be blank"]
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Internal server error"]
  /movies/all:
    get:
      summary: List all movies without pagination or filters
      description: "Retrieves all movies, regardless of the user's subscription plan, without pagination or filters. No authentication is required, but a JWT token can be provided to identify the user."
      tags:
        - Movies
      responses:
        '200':
          description: "Movies retrieved successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
              example:
                movies:
                  - id: 1
                    title: "John Wick"
                    genre: "Action"
                    release_year: 2014
                    rating: 8.8
                    director: "Chad Stahelski"
                    duration: 120
                    description: "John Wick's style of shooting baddi"
                    plan: "basic"
                    poster_url: "https://res.cloudinary.com/example/image/upload/v1234567890/poster.jpg"
                    banner_url: "https://res.cloudinary.com/example/image/upload/v1234567890/banner.jpg"
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Internal server error"]
  /movies/{id}:
    get:
      summary: Show a movie
      description: "Retrieves the details of a specific movie. Authentication is optional. If authenticated, the user's subscription plan (basic, gold, platinum) must meet or exceed the movie's required plan to access details. If unauthenticated, only basic plan movies can be accessed. Provide a valid JWT token in the 'Authorization' header as 'Bearer <token>' for authenticated access."
      tags:
        - Movies
      security:
        - BearerAuth: [] # Optional authentication
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Movie retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
              example:
                id: 1
                title: "John Wick"
                genre: "Action"
                release_year: 2014
                rating: 8.8
                director: "Chad Stahelski"
                duration: 120
                description: "John Wick's style of shooting baddi"
                plan: "basic"
                poster_url: "https://res.cloudinary.com/example/image/upload/v1234567890/poster.jpg"
                banner_url: "https://res.cloudinary.com/example/image/upload/v1234567890/banner.jpg"
        '403':
          description: "Forbidden (insufficient subscription plan)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Access denied: Your subscription plan does not allow access to this movie"]
        '404':
          description: "Movie not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Movie not found"]
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Internal server error"]
    patch:
      summary: Update a movie
      description: "Updates an existing movie. Requires supervisor role. Authenticate using the JWT token obtained from /login. Enter the token in the 'Authorize' button (top-right) as 'Bearer <token>'."
      tags:
        - Movies
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "John Wick Updated"
                genre:
                  type: string
                  example: "Action"
                release_year:
                  type: integer
                  example: 2014
                rating:
                  type: number
                  format: float
                  example: 8.8
                director:
                  type: string
                  example: "Chad Stahelski"
                duration:
                  type: integer
                  example: 120
                description:
                  type: string
                  example: "John Wick's style of shooting baddi, updated"
                plan:
                  type: string
                  enum: [basic, gold, platinum]
                  example: "basic"
                poster:
                  type: string
                  format: binary
                  description: "Poster image file (optional)"
                banner:
                  type: string
                  format: binary
                  description: "Banner image file (optional)"
      responses:
        '200':
          description: "Movie updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
              example:
                id: 1
                title: "John Wick Updated"
                genre: "Action"
                release_year: 2014
                rating: 8.8
                director: "Chad Stahelski"
                duration: 120
                description: "John Wick's style of shooting baddi, updated"
                plan: "basic"
                poster_url: "https://res.cloudinary.com/example/image/upload/v1234567890/poster_updated.jpg"
                banner_url: "https://res.cloudinary.com/example/image/upload/v1234567890/banner_updated.jpg"
        '403':
          description: "Forbidden (requires supervisor role)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Forbidden: You do not have permission to perform this action"]
        '404':
          description: "Movie not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Movie not found"]
        '422':
          description: "Validation errors"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Title can't be blank"]
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Internal server error"]
    delete:
      summary: Delete a movie
      description: "Deletes a movie. Requires supervisor role. Authenticate using the JWT token obtained from /login. Enter the token in the 'Authorize' button (top-right) as 'Bearer <token>'."
      tags:
        - Movies
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Movie deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie deleted successfully"
        '403':
          description: "Forbidden (requires supervisor role)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Forbidden: You do not have permission to perform this action"]
        '404':
          description: "Movie not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Movie not found"]
        '500':
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Internal server error"]
  /subscriptions:
    post:
      summary: Create or update a subscription
      description: "Creates or updates the user's subscription. For web clients, initiates a Stripe Checkout session for paid plans (gold, platinum) and returns a checkout URL; for basic plan, activates the subscription immediately. For mobile clients (React Native), include 'X-Client-Type: mobile' header to initiate a Stripe Payment Intent for paid plans, returning a client_secret for use with Stripe React Native SDK, then call POST /subscriptions/confirm_payment to confirm payment. Requires a valid JWT token in the 'Authorization' header as 'Bearer <token>'."
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      parameters:
        - name: X-Client-Type
          in: header
          required: false
          schema:
            type: string
            enum: [web, mobile]
            example: mobile
          description: "Set to 'mobile' for React Native clients to initiate a Stripe Payment Intent instead of a Checkout Session. Defaults to 'web' if not provided."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                plan:
                  type: string
                  enum: [basic, gold, platinum]
                  example: platinum
              required:
                - plan
      responses:
        '201':
          description: "Subscription created or updated successfully"
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      checkout_url:
                        type: string
                        example: "https://checkout.stripe.com/c/pay/cs_test_..."
                      session_id:
                        type: string
                        example: "cs_test_a1hlMzOdvzNk7ooIDs1EhCk8tiGCENBp2SwjJUUMrlZddY6Ju7WvF4YXTD"
                      subscription_id:
                        type: integer
                        example: 1
                    required:
                      - checkout_url
                      - session_id
                      - subscription_id
                    description: "Response for paid plans (gold, platinum) for web clients (X-Client-Type not set or set to 'web')"
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Payment Intent created"
                      subscription_id:
                        type: integer
                        example: 1
                      client_secret:
                        type: string
                        example: "pi_xxx_secret_yyy"
                        description: "Client secret for the Stripe Payment Intent, to be used with the Stripe React Native SDK to collect payment details."
                      amount:
                        type: integer
                        example: 499
                        description: "Amount in INR (e.g., 499 = ₹499)"
                      currency:
                        type: string
                        example: "inr"
                        description: "Currency of the payment"
                    required:
                      - message
                      - subscription_id
                      - client_secret
                      - amount
                      - currency
                    description: "Response for paid plans (gold, platinum) for mobile clients (X-Client-Type: mobile)"
                  - type: object
                    properties:
                      message:
                        type: string
                        example: "Basic subscription created successfully"
                      subscription_id:
                        type: integer
                        example: 1
                    required:
                      - message
                      - subscription_id
                    description: "Response for basic plan"
              examples:
                web_paid_subscription:
                  summary: Paid subscription for web client
                  value:
                    checkout_url: "https://checkout.stripe.com/c/pay/cs_test_..."
                    session_id: "cs_test_a1hlMzOdvzNk7ooIDs1EhCk8tiGCENBp2SwjJUUMrlZddY6Ju7WvF4YXTD"
                    subscription_id: 1
                mobile_paid_subscription:
                  summary: Paid subscription for mobile client
                  value:
                    message: "Payment Intent created"
                    subscription_id: 1
                    client_secret: "pi_xxx_secret_yyy"
                    amount: 499
                    currency: "inr"
                basic_subscription:
                  summary: Basic subscription
                  value:
                    message: "Basic subscription created successfully"
                    subscription_id: 1
        '401':
          description: "Unauthorized (missing or invalid token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Authenticated user not found"]
        '422':
          description: "Subscription creation or update failed"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Invalid plan. Must be one of: basic, gold, platinum"]
  /subscriptions/success:
    get:
      summary: Handle successful subscription payment
      description: "Called by the frontend after a successful payment to complete the subscription. Updates the subscription status to active and sets the expiry date based on the Stripe subscription. No authentication is required as this is a Stripe redirect endpoint, but a JWT token can be provided if the user is logged in."
      tags:
        - Subscriptions
      parameters:
        - name: session_id
          in: query
          required: true
          schema:
            type: string
            example: "cs_test_a1hlMzOdvzNk7ooIDs1EhCk8tiGCENBp2SwjJUUMrlZddY6Ju7WvF4YXTD"
      responses:
        '200':
          description: "Subscription completed successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscription completed successfully"
                  subscription_id:
                    type: integer
                    example: 1
                  plan:
                    type: string
                    enum: [basic, gold, platinum]
                    example: "platinum"
                  redirect_url:
                    type: string
                    example: "https://movieexplorerplus.netlify.app/subscription-success?session_id=cs_test_...&plan=platinum"
                required:
                  - message
                  - subscription_id
                  - plan
                  - redirect_url
              example:
                message: "Subscription completed successfully"
                subscription_id: 1
                plan: "platinum"
                redirect_url: "https://movieexplorerplus.netlify.app/subscription-success?session_id=cs_test_a1hlMzOdvzNk7ooIDs1EhCk8tiGCENBp2SwjJUUMrlZddY6Ju7WvF4YXTD&plan=platinum"
        '400':
          description: "Invalid session ID (likely accessed directly)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid session_id provided: likely accessed directly"
                  message:
                    type: string
                    example: "This endpoint should be accessed via Stripe redirect after payment."
                  instructions:
                    type: string
                    example: "Call POST /subscriptions to get a checkout_url, then redirect to that URL to complete payment."
                  redirect_url:
                    type: string
                    example: "https://movieexplorerplus.netlify.app"
                required:
                  - error
                  - message
                  - instructions
                  - redirect_url
        '404':
          description: "Subscription or user not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Subscription not found or already processed"]
        '422':
          description: "Failed to complete subscription"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Failed to complete subscription: No such checkout.session: cs_test_invalid"]
  /subscriptions/cancel:
    get:
      summary: Handle subscription cancellation
      description: "Called by the frontend after a cancelled payment to mark the subscription as cancelled. No authentication is required as this is a Stripe redirect endpoint."
      tags:
        - Subscriptions
      parameters:
        - name: session_id
          in: query
          required: true
          schema:
            type: string
            example: "cs_test_a1hlMzOdvzNk7ooIDs1EhCk8tiGCENBp2SwjJUUMrlZddY6Ju7WvF4YXTD"
      responses:
        '200':
          description: "Subscription cancelled successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscription cancelled successfully"
                  redirect_url:
                    type: string
                    example: "https://movieexplorerplus.netlify.app/subscription-cancel?session_id=cs_test_..."
                required:
                  - message
                  - redirect_url
              example:
                message: "Subscription cancelled successfully"
                redirect_url: "https://movieexplorerplus.netlify.app/subscription-cancel?session_id=cs_test_a1hlMzOdvzNk7ooIDs1EhCk8tiGCENBp2SwjJUUMrlZddY6Ju7WvF4YXTD"
        '400':
          description: "Invalid session ID (likely accessed directly)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid session_id provided: likely accessed directly"
                  message:
                    type: string
                    example: "This endpoint should be accessed via Stripe redirect after cancellation."
                  redirect_url:
                    type: string
                    example: "https://movieexplorerplus.netlify.app"
                required:
                  - error
                  - message
                  - redirect_url
        '404':
          description: "Subscription not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Subscription not found or already processed"]
        '422':
          description: "Failed to cancel subscription"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Invalid session ID"]
  /subscriptions/confirm_payment:
    post:
      summary: Confirm subscription payment (mobile clients only)
      description: "Confirms a subscription payment for mobile clients (React Native) after collecting payment details using the Stripe React Native SDK. Updates the subscription status to active and sets the expiry date based on the Stripe Payment Intent. Requires a valid JWT token in the 'Authorization' header as 'Bearer <token>'."
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_intent_id:
                  type: string
                  example: "pi_xxx"
                  description: "The Stripe Payment Intent ID, extracted from the client_secret provided by the POST /subscriptions endpoint."
                subscription_id:
                  type: integer
                  example: 1
                  description: "The ID of the subscription to confirm, provided by the POST /subscriptions endpoint."
              required:
                - payment_intent_id
                - subscription_id
      responses:
        '200':
          description: "Subscription confirmed successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Subscription completed successfully"
                  subscription_id:
                    type: integer
                    example: 1
                  plan:
                    type: string
                    enum: [basic, gold, platinum]
                    example: "platinum"
                required:
                  - message
                  - subscription_id
                  - plan
              example:
                message: "Subscription completed successfully"
                subscription_id: 1
                plan: "platinum"
        '401':
          description: "Unauthorized (missing or invalid token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Authenticated user not found"]
        '404':
          description: "Subscription not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Subscription not found or already processed"]
        '422':
          description: "Failed to confirm subscription"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Failed to complete subscription: Payment not completed"]
  /subscriptions/check_status:
    get:
      summary: Check subscription status
      description: "Checks the current status of the user's subscription. Returns the subscription details including plan, status, and expiry date. Requires a valid JWT token in the 'Authorization' header as 'Bearer <token>'. Use the /login endpoint to obtain a token."
      tags:
        - Subscriptions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Subscription status retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
              example:
                id: 31
                user_id: 10
                plan: "basic"
                status: "active"
                created_at: "2025-05-08T07:30:18.299Z"
                updated_at: "2025-05-27T04:19:24.638Z"
                expiry_date: null
                session_id: null
                session_expires_at: null
        '401':
          description: "Unauthorized (missing or invalid token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Authenticated user not found"]
        '404':
          description: "No active subscription found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Subscription not found"]
  /wishlist:
    get:
      summary: Retrieve the user's wishlist
      description: "Retrieves a list of movies in the authenticated user's wishlist. Each movie includes an 'is_wishlisted' field set to true. Requires a valid JWT token in the 'Authorization' header as 'Bearer <token>'. Use the /login endpoint to obtain a token."
      tags:
        - Wishlist
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Wishlist retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
              example:
                - id: 1
                  title: "John Wick"
                  genre: "Action"
                  release_year: 2014
                  rating: 8.8
                  director: "Chad Stahelski"
                  duration: 120
                  description: "John Wick's style of shooting baddi"
                  plan: "basic"
                  poster_url: "https://res.cloudinary.com/example/image/upload/v1234567890/poster.jpg"
                  banner_url: "https://res.cloudinary.com/example/image/upload/v1234567890/banner.jpg"
                  is_wishlisted: true
        '401':
          description: "Unauthorized (missing or invalid token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Authenticated user not found"]
    post:
      summary: Toggle a movie in the user's wishlist
      description: "Toggles a movie in the authenticated user's wishlist. If the movie is not wishlisted, it is added; if it is already wishlisted, it is removed. Returns the movie's wishlist status ('is_wishlisted'). Requires a valid JWT token in the 'Authorization' header as 'Bearer <token>'. Use the /login endpoint to obtain a token."
      tags:
        - Wishlist
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                movie_id:
                  type: integer
                  example: 1
                  description: "ID of the movie to toggle in the wishlist"
              required:
                - movie_id
      responses:
        '200':
          description: "Wishlist toggled successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie added to wishlist"
                    description: "Either 'Movie added to wishlist' or 'Movie removed from wishlist'"
                  movie_id:
                    type: integer
                    example: 1
                  is_wishlisted:
                    type: boolean
                    example: true
                    description: "Indicates if the movie is now wishlisted (true) or not (false)"
                required:
                  - message
                  - movie_id
                  - is_wishlisted
              examples:
                added:
                  summary: Movie added to wishlist
                  value:
                    message: "Movie added to wishlist"
                    movie_id: 1
                    is_wishlisted: true
                removed:
                  summary: Movie removed from wishlist
                  value:
                    message: "Movie removed from wishlist"
                    movie_id: 1
                    is_wishlisted: false
        '401':
          description: "Unauthorized (missing or invalid token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Authenticated user not found"]
        '404':
          description: "Movie not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Movie not found"]
    delete:
      summary: Clear all movies from the user's wishlist
      description: "Removes all movies from the authenticated user's wishlist. Returns the number of movies removed. Requires a valid JWT token in the 'Authorization' header as 'Bearer <token>'. Use the /login endpoint to obtain a token."
      tags:
        - Wishlist
      security:
        - BearerAuth: []
      responses:
        '200':
          description: "Wishlist cleared successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "All wishlisted movies removed"
                  count:
                    type: integer
                    example: 2
                    description: "Number of movies removed from the wishlist"
                required:
                  - message
                  - count
              example:
                message: "All wishlisted movies removed"
                count: 2
        '401':
          description: "Unauthorized (missing or invalid token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Authenticated user not found"]
  /wishlist/{movie_id}:
    delete:
      summary: Remove a movie from the user's wishlist
      description: "Removes a specific movie from the authenticated user's wishlist. Requires a valid JWT token in the 'Authorization' header as 'Bearer <token>'. Use the /login endpoint to obtain a token."
      tags:
        - Wishlist
      security:
        - BearerAuth: []
      parameters:
        - name: movie_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
          description: "ID of the movie to remove from the wishlist"
      responses:
        '200':
          description: "Movie removed from wishlist successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Movie removed from wishlist"
                  movie_id:
                    type: integer
                    example: 1
                  is_wishlisted:
                    type: boolean
                    example: false
                    description: "Indicates the movie is no longer wishlisted"
                required:
                  - message
                  - movie_id
                  - is_wishlisted
              example:
                message: "Movie removed from wishlist"
                movie_id: 1
                is_wishlisted: false
        '401':
          description: "Unauthorized (missing or invalid token)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Authenticated user not found"]
        '404':
          description: "Movie not in wishlist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors: ["Movie not in wishlist"]
servers:
  - url: http://localhost:3000/api/v1
    description: "Development server"
  - url: https://movie-explorer-rorakshaykat2003-movie.onrender.com/api/v1
    description: "Production server"